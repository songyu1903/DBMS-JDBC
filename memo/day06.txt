# 정규화
 -  삽입/ 수성 / 삭제의 아상현상을 제거하기 위한 작업
 - 데이터의 중복을 최소화 하는데 목적이있다
-  6차 정규화까지 있으나 3차 정규화까지만 잔행

# 1차 정규화
- 같은 성격과 내용의 컬럼이 연속적으로 나타날 경우
- 하나의 컬럼에 여러 데이터를 넣는경우
상품명1  	상품명2	상품명3
==================================
바지1,  	바지2 ,	 바지3

칼럼을 행으로 쪼갠다
바지1
바지2
바지3 


# 2차 정규화
복합키로 구성되었을 경우 복합키의 일부분에만 종속되는 속석이 있는경우

과자
=============================================
이름	맛	가격	제조사
포카칩	기본	1600	오리온
포카칩	양파	1400	오리온
포테토칩	오리지널	1500	농십
포테토칩	양파	1700	농십


- 이름만 알아도 제조사를 알 수 있다 ( 2차 정규화 대상 )

- 2차 정규화 진행

과자
=============================================
이름	맛	가격
포카칩	기본	1600	
포카칩	양파	1400	
포테토칩	오리지널	1500	
포테토칩	양파	1700	


과자_제조사
이름	제조사
=============================================
포카칩	오리온
포테토칩	농심

# 3차 정규화
PK가 아닌 컬럼이 다른 컬럼을 결정하는 경우

- 3차 정규화 
회원 테이블
==============================================
회원번호 PK	이름	우편번호FK


주소 테이블
PK
==============================================
우편번호		시	구	동


# 데이터 베이스에 정규화가 필요한 이유
- DB를 잘못 설계하면 불필요한 데이터 중복으로인해 공간이 낭비된다
- 그 외 이상 현상이 발생될 수 있다.

학번pk   	학생이름   전공   	과목명pk      	성적
1111   	홍길동   	컴공  	 프로그래밍      	90
1111   	홍길동   	컴공   	운영체제     	89
2222   	김철수   	전자   	전자학      		77
3333   	이유리   	전자   	논리회로      	89
4444   	박웅이   	간호   	간호학개론      	100


# 이상현상의 종류
- 삽입이상
새로운 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야하는 문제

새로운 학생의 정보를 삽입하고 싶은데 아직 시험을 보지않아서 
과목명과 성적을 비워야한다.
여기서 과목명은 복합키로 사용되기 떄문에 null을 허용하지 않는다.
그러면 과목명에 '미정' 같은 불필요한 데이터를 넣어야한다.

- 갱신이상
중복 행 중에서 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제

'홍길동' 학생이 간호학과로 전과를 하게되어 전공 칼럼의 값을 변경해야한다.
여기서 홍길동의 모든 전공을 간호학과로 변경해야하는데 일부 행만 변경된다면
홍길동이 간호학과인지 컴공인지 알 수 없다.

- 삭제이상
행을 삭제했을 떄 필요한 데이터도 같이 삭제되는 문제

박웅이 학생이 자퇴하여 삭제해야하는데 간호학 학생이 박웅이 한명이라면
간호학과에 대한 정보가 같이 삭제된다.


=============================================================

# JOIN
여러 테이블에 흩어져 있는 정보 중
사용자가 필요한 정보만 가져와서 하나의 테이블처럼 만들고 결과를 보여주는 것

정규화를 통해 조회 테이블이 너무 많이 쪼개져 있으면 작업이 불편하기 때문에
성능을 향상시키기 위해서 JOIN을 통해 한번에 조회한다.

# 내부 JOIN(INNER JOIN)
조건이 정확히 일치하는 값만 합쳐서 조회

FROM 테이블명A INNER JOIN 테이블명B
ON 조건식

- 등가 JOIN
	ON 절에 등호(=)가 있을 떄
	두 테이블 간에 관계가 있다면(PK, FK 관계) 부모테이블의 PK와
	자식 테이블의 FK를 등호로 비교가 가능하기 때문에
	등가 JOIN 사용이 가능하다.
- 비등가 JOIN
	ON절에 등호(=)가 없을 떄
	
# SQL 실행 순서
프온조웨그헤셀오
FROM > ON > JOIN > WHERE > GROUP BY > HAVING > SELECT > ORDER BY

ON절의 조건은 JOIN이 되면서 실행되고, WHERE절의 조건은 JOIN이 끝나고
실행된다. ON과 WHERE를 같이 사용할 때와, ON만 사용할 때의 결과가 같다면 ON만
사용하는게 일반적으로 좋다.

# 외부 JOIN(OUTER JOIN)




























































































































